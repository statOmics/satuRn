---
output: github_document
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
    collapse = TRUE,
    comment = "#>",
    fig.path = "man/figures/README-",
    out.width = "100%"
)
```

# satuRn

<!-- badges: start -->
[![Lifecycle: maturing](https://img.shields.io/badge/lifecycle-maturing-blue.svg)](https://www.tidyverse.org/lifecycle/#maturing)
[![R build status](https://github.com/statOmics/satuRn/workflows/R-CMD-check-bioc/badge.svg)](https://github.com/statOmics/satuRn/actions)
<!-- badges: end -->

satuRn is a highly performant and scalable method for performing differential transcript usage analyses.

## Installation instructions

Get the development version of `satuRn` from [GitHub](https://github.com/) with:

```{r 'install_dev', eval = FALSE}
devtools::install_github("statOmics/satuRn")
```

The installation should only take a few seconds.
The dependencies of the package are listed in the DESCRIPTION file of the package.

## Issues and bug reports

Please use https://github.com/statOmics/satuRn/issues to submit issues, bug reports, and comments.

## Usage 

A minimal example of the different functions for `modelling`, `testing` and `visualizing` differential transcript usage is provided. See the online [vignette](https://github.com/statOmics/satuRn/blob/master/vignettes/Vignette.Rmd) for a more elaborate and reproducible example.

```{r, eval = FALSE}
library("satuRn")
```

Provide a transcript expression matrix and corresponding `colData` and `rowData`

```{r, eval = FALSE}
sumExp <- SummarizedExperiment::SummarizedExperiment(
    assays = list(counts = Tasic_counts_vignette),
    colData = Tasic_metadata_vignette,
    rowData = txInfo
)

# Specify design formula from colData
metadata(sumExp)$formula <- ~ 0 + as.factor(colData(sumExp)$group)
```

The `fitDTU` function is used to model transcript usage in different groups of samples or cells.

```{r, eval = FALSE}
sumExp <- satuRn::fitDTU(
    object = sumExp,
    formula = ~0 + group, 
    parallel = FALSE,
    BPPARAM = BiocParallel::bpparam(),
    verbose = TRUE
)
```

Next we perform differential usage testing using with `testDTU`

```{r, eval = FALSE}
sumExp <- satuRn::testDTU(object = sumExp, 
                          contrasts = L, 
                          plot = FALSE, 
                          sort = FALSE)
```

Finally, we may visualize the usage of select transcripts 
in select groups of interest with `plotDTU`

```{r, eval = FALSE}
group1 <- rownames(colData(sumExp))[colData(sumExp)$group == "VISp.L5_IT_VISp_Hsd11b1_Endou"]
group2 <- rownames(colData(sumExp))[colData(sumExp)$group == "ALM.L5_IT_ALM_Tnc"]

plots <- satuRn::plotDTU(object = sumExp, 
                         contrast = "Contrast1", 
                         groups = list(group1, group2), 
                         coefficients = list(c(0, 0, 1), c(0, 1, 0)), 
                         summaryStat = "model", 
                         transcripts = c("ENSMUST00000081554", 
                                         "ENSMUST00000195963", 
                                         "ENSMUST00000132062"), 
                         genes = NULL, 
                         top.n = 6)

# Example plot from our publication:
```

```{r  out.width = "60%"}
knitr::include_graphics("./man/figures/README-DTU_plot.png") 
```

## Citation

Below is the citation output from using `citation('satuRn')` in R. Please
run this yourself to check for any updates on how to cite __satuRn__.

```{r 'citation', eval = requireNamespace('satuRn')}
print(citation("satuRn"), bibtex = TRUE)
```

Please note that the `satuRn` was only made possible thanks to many other R and bioinformatics software authors, which are cited either in the vignettes and/or the paper(s) describing this package.

## Code of Conduct

Please note that the `satuRn` project is released with a [Contributor Code of Conduct](https://contributor-covenant.org/version/2/0/CODE_OF_CONDUCT.html). By contributing to this project, you agree to abide by its terms.

## Development tools

* Continuous code testing is possible thanks to [GitHub actions](https://www.tidyverse.org/blog/2020/04/usethis-1-6-0/)  through `r BiocStyle::CRANpkg('usethis')`, `r BiocStyle::CRANpkg('remotes')`, and `r BiocStyle::CRANpkg('rcmdcheck')` customized to use [Bioconductor's docker containers](https://www.bioconductor.org/help/docker/) and `r BiocStyle::Biocpkg('BiocCheck')`.
* Code coverage assessment is possible thanks to [codecov](https://codecov.io/gh) and `r BiocStyle::CRANpkg('covr')`.
* The [documentation website](http://statOmics.github.io/satuRn) is automatically updated thanks to `r BiocStyle::CRANpkg('pkgdown')`.
* The code is styled automatically thanks to `r BiocStyle::CRANpkg('styler')`.
* The documentation is formatted thanks to `r BiocStyle::CRANpkg('devtools')` and `r BiocStyle::CRANpkg('roxygen2')`.

For more details, check the `dev` directory.

This package was developed using `r BiocStyle::Githubpkg('lcolladotor/biocthis')`.


